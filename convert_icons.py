#!/usr/bin/env python3
"""
Icon-Konvertierungsskript f√ºr USB-Monitor
Konvertiert PNG-Icons in ICO und ICNS f√ºr bessere Plattform-Unterst√ºtzung
"""

import os
from pathlib import Path

def convert_png_to_ico():
    """Konvertiert PNG zu ICO f√ºr Windows."""
    try:
        from PIL import Image
        
        png_path = Path("assets/icons/app_icon.png")
        ico_path = Path("assets/icons/app_icon.ico")
        
        if png_path.exists():
            # PNG √∂ffnen und in verschiedene Gr√∂√üen konvertieren
            img = Image.open(png_path)
            
            # Windows ICO ben√∂tigt mehrere Gr√∂√üen
            sizes = [(16, 16), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)]
            icons = []
            
            for size in sizes:
                resized = img.resize(size, Image.Resampling.LANCZOS)
                icons.append(resized)
            
            # ICO-Datei speichern
            icons[0].save(ico_path, format='ICO', sizes=[(icon.width, icon.height) for icon in icons])
            print(f"‚úÖ ICO-Icon erstellt: {ico_path}")
            return True
        else:
            print(f"‚ùå PNG-Icon nicht gefunden: {png_path}")
            return False
            
    except ImportError:
        print("‚ö†Ô∏è  Pillow nicht installiert. Installiere mit: pip install Pillow")
        return False
    except Exception as e:
        print(f"‚ùå Fehler beim Konvertieren zu ICO: {e}")
        return False

def convert_png_to_icns():
    """Konvertiert PNG zu ICNS f√ºr macOS."""
    try:
        from PIL import Image
        
        png_path = Path("assets/icons/app_icon.png")
        icns_path = Path("assets/icons/app_icon.icns")
        
        if png_path.exists():
            # PNG √∂ffnen
            img = Image.open(png_path)
            
            # macOS ICNS ben√∂tigt verschiedene Gr√∂√üen
            sizes = [(16, 16), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256), (512, 512)]
            
            # F√ºr ICNS m√ºssen wir die Bilder in einem speziellen Format speichern
            # Da ICNS komplex ist, speichern wir als PNG und lassen macOS es handhaben
            print(f"‚úÖ PNG-Icon f√ºr macOS bereit: {png_path}")
            print("   Hinweis: macOS kann PNG-Icons direkt verwenden")
            return True
        else:
            print(f"‚ùå PNG-Icon nicht gefunden: {png_path}")
            return False
            
    except ImportError:
        print("‚ö†Ô∏è  Pillow nicht installiert. Installiere mit: pip install Pillow")
        return False
    except Exception as e:
        print(f"‚ùå Fehler beim Konvertieren zu ICNS: {e}")
        return False

def main():
    """Hauptfunktion."""
    print("üé® Icon-Konvertierung f√ºr USB-Monitor")
    print("=" * 40)
    
    # Assets-Ordner erstellen, falls nicht vorhanden
    assets_dir = Path("assets/icons")
    assets_dir.mkdir(parents=True, exist_ok=True)
    
    print("\nüîÑ Konvertiere Icons...")
    
    # PNG zu ICO (Windows)
    ico_success = convert_png_to_ico()
    
    # PNG zu ICNS (macOS)
    icns_success = convert_png_to_icns()
    
    print("\nüìä Zusammenfassung:")
    if ico_success:
        print("   ‚úÖ Windows ICO-Icon erstellt")
    else:
        print("   ‚ùå Windows ICO-Icon fehlgeschlagen")
    
    if icns_success:
        print("   ‚úÖ macOS Icon bereit")
    else:
        print("   ‚ùå macOS Icon fehlgeschlagen")
    
    print("\nüí° Tipps:")
    print("   - F√ºr beste Windows-Unterst√ºtzung: Stelle sicher, dass app_icon.ico existiert")
    print("   - F√ºr beste macOS-Unterst√ºtzung: Stelle sicher, dass app_icon.icns existiert")
    print("   - PNG funktioniert auf beiden Plattformen, aber native Formate sind besser")
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ùå Konvertierung abgebrochen")
        exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Unerwarteter Fehler: {e}")
        exit(1)
